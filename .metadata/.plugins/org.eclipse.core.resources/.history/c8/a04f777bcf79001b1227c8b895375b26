package com.newssite.demo.controllers;

import java.util.LinkedList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.newssite.demo.Exceptions.MediaStackJSONException;
import com.newssite.demo.Exceptions.MediaStackResponseErrorException;
import com.newssite.demo.configurations.Topic;
import com.newssite.demo.models.MediaStack;
import com.newssite.demo.models.MediaStack.MediaStackBuilder;
import com.newssite.demo.resources.Article;
import com.newssite.demo.resources.ErrorTemplate;

@RestController
@RequestMapping("/NewsFetcherService")
public class NewsFetcherController {

	@Autowired
	MediaStackBuilder mediaStackBuilder;
	
	@Autowired
	private KafkaTemplate<String, String> kafkaTemplate;
	
	@RequestMapping("/Demonstration")
	public void demoJson() {
		// Demonstration Code

		ErrorTemplate errorTemplate;

		String[] categories = {"general", "sports", "business", "entertainment", "health", "science", "technology"};
		String[] countries = { "gb" };
		String[] languages = { "en", "fr" };
		String[] keyWords = null;
		String[] sources = { "bbc" };

		MediaStack api = mediaStackBuilder.languages(languages).categories(categories).build();

		try {
			
			//Perform API request
			String apiJsonResponse = api.requestLiveArticles();
			
			ObjectMapper jsonMapper = new ObjectMapper();
			JsonNode responseNode;
			JsonNode dataNode;
			JsonNode articleNode;		
			Article tempArticle;
			
			//Linked Lists that are meant to contain articles of their category
			List<Article> generalArticles = new LinkedList<Article>();
			List<Article> businessArticles = new LinkedList<Article>();
			List<Article> entertainmentArticles = new LinkedList<Article>();
			List<Article> healthArticles = new LinkedList<Article>();
			List<Article> scienceArticles = new LinkedList<Article>();
			List<Article> sportsArticles = new LinkedList<Article>();
			List<Article> technologyArticles = new LinkedList<Article>();
			
			responseNode = jsonMapper.readTree(apiJsonResponse);
			dataNode = responseNode.get("data");
			
			//Place the articles in the correct data-structures
			for(int i = 0; i < dataNode.size(); i++) { 
				
				articleNode = dataNode.get(i);
				tempArticle = Article.builder().author(articleNode.get("author").asText())
						.category(articleNode.get("category").asText())
						.title(articleNode.get("title").asText())
						.url(articleNode.get("url").asText())
						.description(articleNode.get("description").asText())
						.source(articleNode.get("source").asText())
						.imageUrl(articleNode.get("image").asText())
						.language(articleNode.get("language").asText())
						.countryOrigin(articleNode.get("country").asText())
						.publishedAt(articleNode.get("published_at").asText())
						.build();
				
				switch(tempArticle.getCategory()) {
				
				case "general":
					generalArticles.add(tempArticle);
					kafkaTemplate.send(Topic.GENERAL.toString(), jsonMapper.writeValueAsString(tempArticle));
					break;
					
				case "business":
					businessArticles.add(tempArticle);
					kafkaTemplate.send(Topic.BUSINESS.toString(), jsonMapper.writeValueAsString(tempArticle));
					break;
					
				case "entertainment":
					entertainmentArticles.add(tempArticle);
					kafkaTemplate.send(Topic.ENTERTAINMENT.toString(), jsonMapper.writeValueAsString(tempArticle));
					break;
					
				case "health":
					healthArticles.add(tempArticle);
					kafkaTemplate.send(Topic.HEALTH.toString(), jsonMapper.writeValueAsString(tempArticle));
					break;
					
				case "science":
					scienceArticles.add(tempArticle);
					kafkaTemplate.send(Topic.SCIENCE.toString(), jsonMapper.writeValueAsString(tempArticle));
					break;
					
				case "sports":
					sportsArticles.add(tempArticle);
					kafkaTemplate.send(Topic.SPORTS.toString(), jsonMapper.writeValueAsString(tempArticle));
					break;
					
				case "technology":
					technologyArticles.add(tempArticle);
					kafkaTemplate.send(Topic.TECHNOLOGY.toString(), jsonMapper.writeValueAsString(tempArticle));
					break;
					
				default:
					break;
				}	
			}
			
			/*
			//Publish the articles of each data structure to the correct kafka topic
			
			if(!generalArticles.isEmpty()) {
				kafkaTemplate.send(Topic.GENERAL, generalArticles. );
				
			}
			
			if(!businessArticles.isEmpty()) {
				
			}
			
			if(!entertainmentArticles.isEmpty()) {
				
			}
			
			if(!healthArticles.isEmpty()) {
				
			}
			
			if(!scienceArticles.isEmpty()) {
				
			}
			
			if(!sportsArticles.isEmpty()) {
				
			}
			
			if(!technologyArticles.isEmpty()) {
				
			}
			*/
			
			
		} catch (MediaStackResponseErrorException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();

		} catch (MediaStackJSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (JsonMappingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (JsonProcessingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	@RequestMapping("/Demonstration")
	public void demo() {
		// Demonstration Code

		ErrorTemplate errorTemplate;

		String[] categories = {"general", "sports", "business", "entertainment", "health", "science", "technology"};
		String[] countries = { "gb" };
		String[] languages = { "en", "fr" };
		String[] keyWords = null;
		String[] sources = { "bbc" };

		MediaStack api = mediaStackBuilder.languages(languages).categories(categories).build();

		try {
			
			//Perform API request
			String apiJsonResponse = api.requestLiveArticles();
			
			ObjectMapper jsonMapper = new ObjectMapper();
			JsonNode responseNode;
			JsonNode dataNode;
			JsonNode articleNode;		
			Article tempArticle;
			
			//Linked Lists that are meant to contain articles of their category
			List<Article> generalArticles = new LinkedList<Article>();
			List<Article> businessArticles = new LinkedList<Article>();
			List<Article> entertainmentArticles = new LinkedList<Article>();
			List<Article> healthArticles = new LinkedList<Article>();
			List<Article> scienceArticles = new LinkedList<Article>();
			List<Article> sportsArticles = new LinkedList<Article>();
			List<Article> technologyArticles = new LinkedList<Article>();
			
			responseNode = jsonMapper.readTree(apiJsonResponse);
			dataNode = responseNode.get("data");
			
			//Place the articles in the correct data-structures
			for(int i = 0; i < dataNode.size(); i++) { 
				
				articleNode = dataNode.get(i);
				tempArticle = Article.builder().author(articleNode.get("author").asText())
						.category(articleNode.get("category").asText())
						.title(articleNode.get("title").asText())
						.url(articleNode.get("url").asText())
						.description(articleNode.get("description").asText())
						.source(articleNode.get("source").asText())
						.imageUrl(articleNode.get("image").asText())
						.language(articleNode.get("language").asText())
						.countryOrigin(articleNode.get("country").asText())
						.publishedAt(articleNode.get("published_at").asText())
						.build();
				
				switch(tempArticle.getCategory()) {
				
				case "general":
					generalArticles.add(tempArticle);
					kafkaTemplate.send(Topic.GENERAL.toString(), jsonMapper.writeValueAsString(tempArticle));
					break;
					
				case "business":
					businessArticles.add(tempArticle);
					kafkaTemplate.send(Topic.BUSINESS.toString(), jsonMapper.writeValueAsString(tempArticle));
					break;
					
				case "entertainment":
					entertainmentArticles.add(tempArticle);
					kafkaTemplate.send(Topic.ENTERTAINMENT.toString(), jsonMapper.writeValueAsString(tempArticle));
					break;
					
				case "health":
					healthArticles.add(tempArticle);
					kafkaTemplate.send(Topic.HEALTH.toString(), jsonMapper.writeValueAsString(tempArticle));
					break;
					
				case "science":
					scienceArticles.add(tempArticle);
					kafkaTemplate.send(Topic.SCIENCE.toString(), jsonMapper.writeValueAsString(tempArticle));
					break;
					
				case "sports":
					sportsArticles.add(tempArticle);
					kafkaTemplate.send(Topic.SPORTS.toString(), jsonMapper.writeValueAsString(tempArticle));
					break;
					
				case "technology":
					technologyArticles.add(tempArticle);
					kafkaTemplate.send(Topic.TECHNOLOGY.toString(), jsonMapper.writeValueAsString(tempArticle));
					break;
					
				default:
					break;
				}	
			}
			
			/*
			//Publish the articles of each data structure to the correct kafka topic
			
			if(!generalArticles.isEmpty()) {
				kafkaTemplate.send(Topic.GENERAL, generalArticles. );
				
			}
			
			if(!businessArticles.isEmpty()) {
				
			}
			
			if(!entertainmentArticles.isEmpty()) {
				
			}
			
			if(!healthArticles.isEmpty()) {
				
			}
			
			if(!scienceArticles.isEmpty()) {
				
			}
			
			if(!sportsArticles.isEmpty()) {
				
			}
			
			if(!technologyArticles.isEmpty()) {
				
			}
			*/
			
			
		} catch (MediaStackResponseErrorException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();

		} catch (MediaStackJSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (JsonMappingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (JsonProcessingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	@RequestMapping("/RetrieveNews/Categories/{categories}/Countries/{countries}/Languages/{languages}/Keywords/{keywords}/PaginationLimit/{limit}/PaginationOffset/{offset}/Sources/{sources}/SortBy/{sort}")
	public String retrieveNews(@PathVariable("categories") String[] categories,
			@PathVariable("countries") String[] countries, @PathVariable("languages") String[] languages,
			@PathVariable("keywords") String[] keywords, @PathVariable("limit") int limit,
			@PathVariable("offset") int offset, @PathVariable("sources") String[] sources,
			@PathVariable("sort") String sort) {

		ErrorTemplate errorTemplate;

		// Build the API request parameters
		MediaStack api = mediaStackBuilder.countries(countries).categories(categories).languages(languages)
				.sources(sources).keyWords(keywords).paginationLimit(limit).paginationOffset(offset).sortBy(sort)
				.build();

		try {
			// Perform the API request and return the JSON result
			return api.requestLiveArticles();
		} catch (MediaStackResponseErrorException e) {
			// TODO Auto-generated catch block
			errorTemplate = new ErrorTemplate("api-error-responses", "All APIs produced errors in their responses");
			return errorTemplate.toJSON();

		} catch (MediaStackJSONException e) {
			// TODO Auto-generated catch block
			errorTemplate = new ErrorTemplate("json-error", "Error processing JSON data");
			return errorTemplate.toJSON();
		}

	}

	@RequestMapping("/PublishNews/Categories/{categories}/Countries/{countries}/Languages/{languages}/Keywords/{keywords}/PaginationLimit/{limit}/PaginationOffset/{offset}/Sources/{sources}/SortBy/{sort}")
	public void publishNews(@PathVariable("categories") String[] categories,
			@PathVariable("countries") String[] countries, @PathVariable("languages") String[] languages,
			@PathVariable("keywords") String[] keywords, @PathVariable("limit") int limit,
			@PathVariable("offset") int offset, @PathVariable("sources") String[] sources,
			@PathVariable("sort") String sort) {

		// Build the API request parameters
		MediaStack api = mediaStackBuilder.countries(countries).categories(categories).languages(languages)
				.sources(sources).keyWords(keywords).paginationLimit(limit).paginationOffset(offset).sortBy(sort)
				.build();
		try {
			
			//Perform API request
			String apiJsonResponse = api.requestLiveArticles();
			
			ObjectMapper jsonMapper = new ObjectMapper();
			JsonNode responseNode;
			JsonNode dataNode;
			JsonNode articleNode;		
			Article tempArticle;
			
			//Linked Lists that are meant to contain articles of their category
			List<Article> generalArticles = new LinkedList<Article>();
			List<Article> businessArticles = new LinkedList<Article>();
			List<Article> entertainmentArticles = new LinkedList<Article>();
			List<Article> healthArticles = new LinkedList<Article>();
			List<Article> scienceArticles = new LinkedList<Article>();
			List<Article> sportsArticles = new LinkedList<Article>();
			List<Article> technologyArticles = new LinkedList<Article>();
			
			responseNode = jsonMapper.readTree(apiJsonResponse);
			dataNode = responseNode.get("data");
			
			//Place the articles in the correct data-structures
			for(int i = 0; i < dataNode.size(); i++) { 
				
				articleNode = dataNode.get(i);
				tempArticle = Article.builder().author(articleNode.get("author").asText())
						.category(articleNode.get("category").asText())
						.title(articleNode.get("title").asText())
						.url(articleNode.get("url").asText())
						.description(articleNode.get("description").asText())
						.source(articleNode.get("source").asText())
						.imageUrl(articleNode.get("image").asText())
						.language(articleNode.get("language").asText())
						.countryOrigin(articleNode.get("country").asText())
						.publishedAt(articleNode.get("published_at").asText())
						.build();
				
				switch(tempArticle.getCategory()) {
				
				case "general":
					generalArticles.add(tempArticle);
					kafkaTemplate.send(Topic.GENERAL.toString(), jsonMapper.writeValueAsString(tempArticle));
					break;
					
				case "business":
					businessArticles.add(tempArticle);
					kafkaTemplate.send(Topic.BUSINESS.toString(), jsonMapper.writeValueAsString(tempArticle));
					break;
					
				case "entertainment":
					entertainmentArticles.add(tempArticle);
					kafkaTemplate.send(Topic.ENTERTAINMENT.toString(), jsonMapper.writeValueAsString(tempArticle));
					break;
					
				case "health":
					healthArticles.add(tempArticle);
					kafkaTemplate.send(Topic.HEALTH.toString(), jsonMapper.writeValueAsString(tempArticle));
					break;
					
				case "science":
					scienceArticles.add(tempArticle);
					kafkaTemplate.send(Topic.SCIENCE.toString(), jsonMapper.writeValueAsString(tempArticle));
					break;
					
				case "sports":
					sportsArticles.add(tempArticle);
					kafkaTemplate.send(Topic.SPORTS.toString(), jsonMapper.writeValueAsString(tempArticle));
					break;
					
				case "technology":
					technologyArticles.add(tempArticle);
					kafkaTemplate.send(Topic.TECHNOLOGY.toString(), jsonMapper.writeValueAsString(tempArticle));
					break;
					
				default:
					break;
				}	
			}
			
			/*
			//Publish the articles of each data structure to the correct kafka topic
			
			if(!generalArticles.isEmpty()) {
				kafkaTemplate.send(Topic.GENERAL, generalArticles. );
				
			}
			
			if(!businessArticles.isEmpty()) {
				
			}
			
			if(!entertainmentArticles.isEmpty()) {
				
			}
			
			if(!healthArticles.isEmpty()) {
				
			}
			
			if(!scienceArticles.isEmpty()) {
				
			}
			
			if(!sportsArticles.isEmpty()) {
				
			}
			
			if(!technologyArticles.isEmpty()) {
				
			}
			*/
			
			
		} catch (MediaStackResponseErrorException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();

		} catch (MediaStackJSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (JsonMappingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (JsonProcessingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
